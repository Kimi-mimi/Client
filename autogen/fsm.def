Autogen Definitions fsm;

method = callout;
type   = reentrant;

prefix = fsm;

cookie = "/* SMTPConnectionList */ void **head";
cookie = "/* SMTPConnection */ void *connection";
cookie = "/* String */ const void *response";
cookie = "/* fd_set */ void *readFdSet";
cookie = "/* fd_set */ void *writeFdSet";

state  = closing, closed, connecting,
    sending_helo,
    sending_mail_from,
    sending_rcpt_to,
    sending_data,
    sending_message,
    sending_rset,
    sending_quit,
    need_to_rcpt_to_or_data,
    need_to_mail_from_or_quit,
    need_to_reconnect_or_close;

event  = connection_closed_by_remote, internal_error,
    send_bytes,
    good_response, bad_response, unreadable_response,
    need_rcpt_to, need_data,
    need_mail_from, need_quit,
    need_reconnect, need_close;

transition =
{ tst = '*';                        tev = internal_error;               next = need_to_reconnect_or_close;  ttype = internal_error_decide_to_reconnect_or_close; },
{ tst = '*';                        tev = connection_closed_by_remote;  next = closing;                     ttype = closed_by_remote; };

transition =
{ tst = connecting;                 tev = good_response;                next = sending_helo;                ttype = connect_success; },
{ tst = connecting;                 tev = bad_response;                 next = closed;                      ttype = connect_bad; },
{ tst = connecting;                 tev = unreadable_response;          next = closed;                      ttype = connect_unreadable; };

transition =
{ tst = sending_helo;               tev = good_response;                next = need_to_mail_from_or_quit;   ttype = helo_success_decide_mail_from_or_quit; },
{ tst = sending_helo;               tev = bad_response;                 next = closed;                      ttype = helo_bad; },
{ tst = sending_helo;               tev = unreadable_response;          next = closed;                      ttype = helo_unreadable; },
{ tst = sending_helo;               tev = send_bytes;                   next = sending_helo;                ttype = send_bytes; };

transition =
{ tst = sending_quit;               tev = good_response;                next = closed;                      ttype = quit_success; },
{ tst = sending_quit;               tev = bad_response;                 next = closed;                      ttype = quit_bad; },
{ tst = sending_quit;               tev = unreadable_response;          next = closed;                      ttype = quit_unreadable; },
{ tst = sending_quit;               tev = send_bytes;                   next = sending_quit;                ttype = send_bytes; };

transition =
{ tst = sending_mail_from;          tev = good_response;                next = need_to_rcpt_to_or_data;     ttype = mail_from_success_decide_rcpt_to_or_data; },
{ tst = sending_mail_from;          tev = bad_response;                 next = need_to_mail_from_or_quit;   ttype = mail_from_bad_decide_mail_from_or_quit; },
{ tst = sending_mail_from;          tev = unreadable_response;          next = need_to_mail_from_or_quit;   ttype = mail_from_unreadable_decide_mail_from_or_quit; },
{ tst = sending_mail_from;          tev = send_bytes;                   next = sending_mail_from;           ttype = send_bytes; };

transition =
{ tst = need_to_mail_from_or_quit;  tev = need_mail_from;               next = sending_mail_from;           ttype = decided_to_mail_from; },
{ tst = need_to_mail_from_or_quit;  tev = need_quit;                    next = sending_quit;                ttype = decided_to_quit; };

transition =
{ tst = sending_rcpt_to;            tev = good_response;                next = need_to_rcpt_to_or_data;     ttype = rcpt_to_success_decide_rcpt_to_or_data; },
{ tst = sending_rcpt_to;            tev = bad_response;                 next = need_to_rcpt_to_or_data;     ttype = rcpt_to_bad_decide_rcpt_to_or_data; },
{ tst = sending_rcpt_to;            tev = unreadable_response;          next = sending_rset;                ttype = rcpt_to_unreadable; },
{ tst = sending_rcpt_to;            tev = send_bytes;                   next = sending_rcpt_to;             ttype = send_bytes; };

transition =
{ tst = need_to_rcpt_to_or_data;    tev = need_rcpt_to;                 next = sending_rcpt_to;             ttype = decided_to_rcpt; },
{ tst = need_to_rcpt_to_or_data;    tev = need_data;                    next = sending_data;                ttype = decided_to_data; };

transition =
{ tst = sending_data;               tev = good_response;                next = sending_message;             ttype = data_success; },
{ tst = sending_data;               tev = bad_response;                 next = sending_rset;                ttype = data_bad; },
{ tst = sending_data;               tev = unreadable_response;          next = sending_rset;                ttype = data_unreadable; },
{ tst = sending_data;               tev = send_bytes;                   next = sending_data;                ttype = send_bytes; };

transition =
{ tst = sending_message;            tev = good_response;                next = need_to_mail_from_or_quit;   ttype = message_success_decide_to_mail_from_or_quit; },
{ tst = sending_message;            tev = bad_response;                 next = sending_rset;                ttype = message_bad_decide_to_mail_from_or_quit; },
{ tst = sending_message;            tev = unreadable_response;          next = sending_rset;                ttype = message_unreadable_decide_to_mail_from_or_quit; },
{ tst = sending_message;            tev = send_bytes;                   next = sending_message;             ttype = send_bytes; };

transition =
{ tst = sending_rset;               tev = good_response;                next = need_to_mail_from_or_quit;   ttype = rset_success_decide_to_mail_to_or_quit; },
{ tst = sending_rset;               tev = bad_response;                 next = need_to_reconnect_or_close;  ttype = rset_bad_decide_to_reconnect_or_close; },
{ tst = sending_rset;               tev = unreadable_response;          next = need_to_reconnect_or_close;  ttype = rset_unreadable_decide_to_reconnect_or_close; },
{ tst = sending_rset;               tev = send_bytes;                   next = sending_rset;                ttype = send_bytes; };

transition =
{ tst = need_to_reconnect_or_close; tev = need_reconnect;               next = connecting;                  ttype = log_decided_to_reconnect; },
{ tst = need_to_reconnect_or_close; tev = need_close;                   next = closed;                      ttype = log_decided_to_close; };
